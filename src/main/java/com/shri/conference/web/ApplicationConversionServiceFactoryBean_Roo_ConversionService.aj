// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.shri.conference.web;

import com.shri.conference.domain.Speaker;
import com.shri.conference.domain.Talk;
import com.shri.conference.web.ApplicationConversionServiceFactoryBean;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.core.convert.converter.Converter;
import org.springframework.format.FormatterRegistry;

privileged aspect ApplicationConversionServiceFactoryBean_Roo_ConversionService {
    
    declare @type: ApplicationConversionServiceFactoryBean: @Configurable;
    
    public Converter<Speaker, String> ApplicationConversionServiceFactoryBean.getSpeakerToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.shri.conference.domain.Speaker, java.lang.String>() {
            public String convert(Speaker speaker) {
                return new StringBuilder().append(speaker.getName()).append(" ").append(speaker.getEmail()).append(" ").append(speaker.getOrganizationName()).append(" ").append(speaker.getPassword()).toString();
            }
        };
    }
    
    public Converter<Long, Speaker> ApplicationConversionServiceFactoryBean.getIdToSpeakerConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, com.shri.conference.domain.Speaker>() {
            public com.shri.conference.domain.Speaker convert(java.lang.Long id) {
                return Speaker.findSpeaker(id);
            }
        };
    }
    
    public Converter<String, Speaker> ApplicationConversionServiceFactoryBean.getStringToSpeakerConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.shri.conference.domain.Speaker>() {
            public com.shri.conference.domain.Speaker convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), Speaker.class);
            }
        };
    }
    
    public Converter<Talk, String> ApplicationConversionServiceFactoryBean.getTalkToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.shri.conference.domain.Talk, java.lang.String>() {
            public String convert(Talk talk) {
                return new StringBuilder().toString();
            }
        };
    }
    
    public Converter<Long, Talk> ApplicationConversionServiceFactoryBean.getIdToTalkConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, com.shri.conference.domain.Talk>() {
            public com.shri.conference.domain.Talk convert(java.lang.Long id) {
                return Talk.findTalk(id);
            }
        };
    }
    
    public Converter<String, Talk> ApplicationConversionServiceFactoryBean.getStringToTalkConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.shri.conference.domain.Talk>() {
            public com.shri.conference.domain.Talk convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), Talk.class);
            }
        };
    }
    
    public void ApplicationConversionServiceFactoryBean.installLabelConverters(FormatterRegistry registry) {
        registry.addConverter(getSpeakerToStringConverter());
        registry.addConverter(getIdToSpeakerConverter());
        registry.addConverter(getStringToSpeakerConverter());
        registry.addConverter(getTalkToStringConverter());
        registry.addConverter(getIdToTalkConverter());
        registry.addConverter(getStringToTalkConverter());
    }
    
    public void ApplicationConversionServiceFactoryBean.afterPropertiesSet() {
        super.afterPropertiesSet();
        installLabelConverters(getObject());
    }
    
}
